#!/bin/bash

# This script comes with ABSOLUTELY NO WARRANTY, use at own risk
# Copyright (C) 2014 Osiris Alejandro Gomez <osiux@osiux.com.ar>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

FILTERS='port 80'

ITMP='ips.tmp'
STMP='sip.tmp'
DTMP='dip.tmp'

RANK=200
PACKETS=1000
DOT=pcap2dot.dot
LOG=pcap2dot.log

while getopts "d:f:k:r:p:" OPTION
do
  case $OPTION in
    d)
      DOT=$OPTARG
      ;;
    f)
      FILTERS=$OPTARG
      ;;
    k)
      RANK=$OPTARG
      ;;
    p)
      PACKETS=$OPTARG
      ;;
    r)
      PCAP=$OPTARG
      ;;
  esac
done

if [ ! -e $PCAP ]
then
  echo ERROR not found pcap file: $PCAP
  exit 1
fi

>$LOG

log ()
{
  NOW=$(date "+%Y-%m-%d %H:%M")
  echo $NOW' '"$1" >>$LOG
}

log "Reading $PCAP with $FILTERS"

tcpdump -tttnnn -s1 -r $PCAP $FILTERS 2>/dev/null | \
cut -d ' ' -f 3,5 | tr -d ":" | \
egrep -v "[a-zA-Z]" | \
sort | uniq -c | sort -nr | \
awk '{print $2"."$3}' | \
head -n $RANK | \
awk -F\. '{print $1"."$2"."$3"."$4" "$5" "$6"."$7"."$8"."$9" "$10}' > $ITMP

words2png ()
{
  c=0
  WORDS=$(echo "$1" | tr "/.\(,;:\)\-" " "  | tr A-Z a-z)

  G='^[a-z]{1,}[a-z0-9_\-]{2,}'
  LIST=$(echo $WORDS | tr " " "\n" | sort -u | egrep -v "^$" | egrep "$G")
  while read W
  do
    F="img/$W.png"

    if [ $c -gt 4 ]
    then
      break;
    fi

    if [ -e "$F" ]
    then
      I[c]=$W
      c=$[$c+1]
    else
      log "not found file: $F"
    fi
  done <<<"$LIST"

  T=${#I[@]}
  log "Total: $T Images: ${I[@]}"  

  if [ $T -eq 0 ]
  then
    echo ''
    exit
  fi

  if [ $T -eq 1 ]
  then
    echo 'img/'${I[0]}'.png'
    exit
  fi

  if [ $T -gt 1 ]
  then
    if [[ ${I[*]} =~ 'linux' ]]
    then
      if [[ ${I[*]} =~ "android" ]]
      then
        I=( $(echo "${I[@]/'linux'}"  | sed s/"\ $"//g) )
      fi
      if [[ ${I[*]} =~ "ubuntu" ]]
      then
        I=( $(echo "${I[@]/'linux'}"  | sed s/"\ $"//g) )
      fi
      if [[ ${I[*]} =~ "debian" ]]
      then
        I=( $(echo "${I[@]/'linux'}"  | sed s/"\ $"//g) )
      fi
    fi
    if [[ ${I[*]} =~ 'mozilla' ]]
    then
      if [[ ${I[*]} =~ "firefox" ]]
      then
        I=( $(echo "${I[@]/'mozilla'}"  | sed s/"\ $"//g) )
      fi
    fi
    if [[ ${I[*]} =~ 'chrome' ]]
    then
      if [[ ${I[*]} =~ "chromium" ]]
      then
        I=( $(echo "${I[@]/'chrome'}"  | sed s/"\ $"//g) )
      fi
    fi
  fi

  T=${#I[@]}

  if [ $T -eq 0 ]
  then
    echo ''
    exit
  fi

  if [ $T -eq 1 ]
  then
    echo 'img/'${I[0]}'.png'
    exit
  fi

  if [ $T -gt 1 ]
  then
    GROUP=$(echo "${I[@]}" | tr " " "-")
    GROUP_FILE='img/'$GROUP'.png'

    if [ ! -e $GROUP_FILE ]
    then
      CONVERT=''
      for n in ${I[@]}
      do
        CONVERT=$CONVERT" img/"$n".png "
      done
      log "Convert $CONVERT into $GROUP_FILE"
      convert +append $CONVERT $GROUP_FILE >/dev/null 2>/dev/null
      OK=$(echo $?)
      if [ $OK -ne 0 ]
      then
        echo ''
        exit
      fi
    fi

    echo $GROUP_FILE
  fi
}

log "start generate $DOT"

echo "digraph tcp {" >$DOT
echo 'node [shape="none", fontname="inconsolata", fontsize=10];' >>$DOT
echo 'edge [arrowsize=.5, color=gray];' >>$DOT

cat $ITMP | awk '{print $1,$2}' | sort | uniq -c | \
awk '{print $2,$3,$1}' >$STMP

TOTAL_SIP=$(awk 'BEGIN {S=0} {S+=$3} END {print S}' $STMP)

cat $STMP | while read LINE
do
  SIP=$(echo $LINE | cut -d ' ' -f1)
  SPORT=$(echo $LINE | cut -d ' ' -f2)
  PACKETS=$(echo $LINE | cut -d ' ' -f3)
  PW=$(echo $PACKETS $TOTAL_SIP | awk '{printf "%0.2f",($1/$2)*50}')
  S=$SIP"."$SPORT

  echo "\""$SIP"\" -> \""$S"\" [len=3, penwidth=$PW];" >>$DOT
  echo "\""$SIP\"" [label=\""$SIP"\"];" >>$DOT
  echo "\""$S\"" [label=\""$SPORT"\"];" >>$DOT
done

cat $ITMP | awk '{print $3,$4}' | sort | uniq -c | \
awk '{print $2,$3,$1}' >$DTMP

TOTAL_DIP=$(awk 'BEGIN {S=0} {S+=$3} END {print S}' $DTMP)

cat $DTMP | while read LINE
do
  DIP=$(echo $LINE | cut -d ' ' -f1)
  DPORT=$(echo $LINE | cut -d ' ' -f2)
  PACKETS=$(echo $LINE | cut -d ' ' -f3)
  PW=$(echo $PACKETS $TOTAL_DIP | awk '{printf "%0.2f",($1/$2)*50}')
  S=$DIP"."$DPORT

  echo "\""$DIP"\" -> \""$S"\" [len=3, penwidth=$PW];" >>$DOT
  echo "\""$DIP\"" [label=\""$DIP"\"];" >>$DOT
  echo "\""$D\"" [label=\""$DPORT"\"];" >>$DOT
done

cat $ITMP | while read LINE
do
  SIP=$(echo $LINE | cut -d ' ' -f1)
  SPORT=$(echo $LINE | cut -d ' ' -f2)
  DIP=$(echo $LINE | cut -d ' ' -f3)
  DPORT=$(echo $LINE | cut -d ' ' -f4)
  
  S=$SIP"."$SPORT
  D=$DIP"."$DPORT

  echo "\""$S"\" -> \""$D"\" [len=2.5];" >>$DOT
done

# capture Server header
grep " 80 " $ITMP | sort -u | while read LINE
do
  SIP=$(echo $LINE | cut -d' ' -f1)
  DIP=$(echo $LINE | cut -d' ' -f3)
  DPORT=$(echo $LINE | cut -d' ' -f4)
  FILTER="src port 80 and src $SIP and dst $DIP and dst port $DPORT"
  HEADERS=$(tcpdump -nnntttA -s 190 -r $PCAP $FILTER | \
    egrep "(Server:|X-Generator:)" | head -2)
  SERVER=$(echo "$HEADERS" | grep ^Server: | head -1 | cut -c 9- | tr -d "\n" | tr -d "\r")
  X_GENERATOR=$(echo "$HEADERS" | grep ^X-Generator: | head -1 | cut -c 9- | tr -d "\n" | tr -d "\r")

  if [ -z "$SERVER" ]
  then
    log "Not found Server for $SIP"
    continue
  fi

  T=$(echo $SERVER |tr " " "\n" | wc -l)

  IMG=$(words2png "$SERVER $X_GENERATOR")
  NODE=$SIP".80"
  log "$SIP Server: $SERVER Image: $IMG"
  if [ ! -z "$IMG" ]
  then
    echo "\""$NODE"\" [shape=\"none\", label=\"\", image=\"$IMG\"];" >>$DOT
  else
    log "Not found image for: $NODE with server: $SERVER"

    if [ $T -eq 1 ]
    then
      log "using: $SERVER label for: $SIP"
      echo "\""$NODE"\" [shape=\"none\", label=\"$SERVER\"];" >>$DOT
    fi
  fi
done

# capture User-agent
grep 80$ $ITMP | cut -d ' ' -f1,2 | sort -u | while read SIP_SPORT
do
  SIP=$(echo $SIP_SPORT | cut -d' ' -f1)
  SPORT=$(echo $SIP_SPORT | cut -d' ' -f2)
  HTTP_GET="src host $SIP and src port $SPORT and dst port 80 and tcp[32:4]= 0x47455420"
  TCP_UA="tcpdump -tttnnnA -s190 -c1 -r $PCAP $HTTP_GET"
  UA=$($TCP_UA 2>/dev/null | egrep "^User-Agent:" | cut -c 13-)

  if [ -z "$UA" ]
  then
    log "Not found User-Agent for $SIP"
    continue
  fi

  T=$(echo $UA |tr " " "\n" | wc -l)
  IMG=$(words2png "$UA")
  NODE=$SIP"."$SPORT

  if [ ! -z "$IMG" ]
  then
    echo "\""$NODE"\" [shape=\"none\", label=\"\", image=\"$IMG\"];" >>$DOT
  else
    log "Not found image for: $NODE with User-Agent: $UA"
    if [ $T -eq 1 ]
    then
      log "Using $UA label for: $SIP"
      echo "\""$NODE"\" [shape=\"none\", label=\"$UA\"];" >>$DOT
    fi
  fi
done

echo "}" >>$DOT

cat $DOT
